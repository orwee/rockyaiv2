import pandas as pd
import re
import requests
import json
import streamlit as st
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np
import random

# Page configuration
st.set_page_config(
    page_title="Rocky - DeFi Assistant",
    page_icon="üöÄ",
    layout="wide"
)

# Clase para el agente con memoria
class CryptoAgent:
    def __init__(self):
        # Estado del agente - memoria para almacenar las variables
        self.state = {
            "blockchain": None,
            "token": None,
            "tvl_min": None,
            "apy_min": None,
            "protocol": None
        }

        # Almacenar las √∫ltimas oportunidades encontradas
        self.last_opportunities = []

        # Mapeo de nombres de blockchain para DeFiLlama
        self.chain_mapping = {
            "ethereum": "Ethereum",
            "arbitrum": "Arbitrum",
            "solana": "Solana",
            "avalanche": "Avalanche",
            "polygon": "Polygon",
            "binance": "BSC",
            "bsc": "BSC",
            "optimism": "Optimism",
            "fantom": "Fantom",
            "cardano": "Cardano",
            "base": "Base"
        }

        # Lista de palabras comunes que no deben ser tratadas como tokens
        self.common_words = [
            "a", "al", "algo", "algunas", "algunos", "ante", "antes", "como", "con", "contra",
            "cual", "cuando", "de", "del", "desde", "donde", "durante", "e", "el", "ella",
            "ellas", "ellos", "en", "entre", "era", "erais", "eran", "eras", "eres", "es",
            "esa", "esas", "ese", "eso", "esos", "esta", "estaba", "estabais", "estaban",
            "estabas", "estad", "estada", "estadas", "estado", "estados", "estamos", "estando",
            "estar", "estaremos", "estar√°", "estar√°n", "estar√°s", "estar√©", "estar√©is",
            "estar√≠a", "estar√≠ais", "estar√≠amos", "estar√≠an", "estar√≠as", "estas", "este",
            "estemos", "esto", "estos", "estoy", "estuve", "estuviera", "estuvierais",
            "estuvieran", "estuvieras", "estuvieron", "estuviese", "estuvieseis", "estuviesen",
            "estuvieses", "estuvimos", "estuviste", "estuvisteis", "estuvi√©ramos",
            "estuvi√©semos", "estuvo", "est√°", "est√°bamos", "est√°is", "est√°n", "est√°s", "est√©",
            "est√©is", "est√©n", "est√©s", "fue", "fuera", "fuerais", "fueran", "fueras",
            "fueron", "fuese", "fueseis", "fuesen", "fueses", "fui", "fuimos", "fuiste",
            "fuisteis", "fu√©ramos", "fu√©semos", "ha", "habida", "habidas", "habido", "habidos",
            "habiendo", "habremos", "habr√°", "habr√°n", "habr√°s", "habr√©", "habr√©is", "habr√≠a",
            "habr√≠ais", "habr√≠amos", "habr√≠an", "habr√≠as", "hab√©is", "hab√≠a", "hab√≠ais",
            "hab√≠amos", "hab√≠an", "hab√≠as", "han", "has", "hasta", "hay", "haya", "hayamos",
            "hayan", "hayas", "hay√°is", "he", "hemos", "hube", "hubiera", "hubierais",
            "hubieran", "hubieras", "hubieron", "hubiese", "hubieseis", "hubiesen", "hubieses",
            "hubimos", "hubiste", "hubisteis", "hubi√©ramos", "hubi√©semos", "hubo", "la", "las",
            "le", "les", "lo", "los", "me", "mi", "mis", "mucho", "muchos", "muy", "m√°s",
            "m√≠", "m√≠a", "m√≠as", "m√≠o", "m√≠os", "nada", "ni", "no", "nos", "nosotras",
            "nosotros", "nuestra", "nuestras", "nuestro", "nuestros", "o", "os", "otra",
            "otras", "otro", "otros", "para", "pero", "poco", "por", "porque", "que",
            "quien", "quienes", "qu√©", "se", "sea", "seamos", "sean", "seas", "seremos",
            "ser√°", "ser√°n", "ser√°s", "ser√©", "ser√©is", "ser√≠a", "ser√≠ais", "ser√≠amos",
            "ser√≠an", "ser√≠as", "se√°is", "si", "sido", "siendo", "sin", "sobre", "sois",
            "somos", "son", "soy", "su", "sus", "suya", "suyas", "suyo", "suyos", "s√≠",
            "tambi√©n", "tanto", "te", "tendremos", "tendr√°", "tendr√°n", "tendr√°s", "tendr√©",
            "tendr√©is", "tendr√≠a", "tendr√≠ais", "tendr√≠amos", "tendr√≠an", "tendr√≠as", "tened",
            "tenemos", "tenga", "tengamos", "tengan", "tengas", "tengo", "teng√°is", "tenida",
            "tenidas", "tenido", "tenidos", "teniendo", "ten√©is", "ten√≠a", "ten√≠ais",
            "ten√≠amos", "ten√≠an", "ten√≠as", "ti", "tiene", "tienen", "tienes", "todo",
            "todos", "tu", "tus", "tuve", "tuviera", "tuvierais", "tuvieran", "tuvieras",
            "tuvieron", "tuviese", "tuvieseis", "tuviesen", "tuvieses", "tuvimos", "tuviste",
            "tuvisteis", "tuvi√©ramos", "tuvi√©semos", "tuvo", "tuya", "tuyas", "tuyo", "tuyos",
            "t√∫", "un", "una", "uno", "unos", "vosotras", "vosotros", "vuestra", "vuestras",
            "vuestro", "vuestros", "y", "ya", "yo", "√©l", "√©ramos", "ver", "dame", "quiero",
            "necesito", "haz", "hazme", "mostrar", "muestra", "muestrame", "dime", "cu√°l",
            "cuales", "qu√©", "que", "deseo", "obtener", "conseguir", "listar", "hay"
        ]

    def process_tvl_value(self, value_str):
        """Procesa valores de TVL con K y M"""
        value_str = value_str.strip().lower()
        if value_str.endswith('k'):
            return str(float(value_str[:-1]) * 1000)
        elif value_str.endswith('m'):
            return str(float(value_str[:-1]) * 1000000)
        else:
            return value_str

    def detect_all_variables(self, query):
        """Detecta todas las variables mencionadas en la consulta"""
        query_lower = query.lower()
        updates = {}

        # PRIMERO detectar token para evitar conflictos con blockchain
        # Detectar token (priorizar patrones que mencionan expl√≠citamente "token")
        token_patterns = [
            r'token\s+(?:de\s+)?(\w+)',
            r'el\s+token\s+(?:de\s+)?(\w+)',
            r'(\w+)\s+token',
            r'selecciona(?:r)?\s+(?:el\s+)?token\s+(?:de\s+)?(\w+)',
            r'buscar?\s+(?:el\s+)?token\s+(?:de\s+)?(\w+)',
            r'encontrar?\s+(?:el\s+)?token\s+(?:de\s+)?(\w+)',
            r'busca\s+(?:el\s+)?token\s+(?:de\s+)?(\w+)'
        ]

        for pattern in token_patterns:
            token_match = re.search(pattern, query_lower)
            if token_match:
                token = token_match.group(1)
                # Verificamos que el token no sea una palabra com√∫n y tenga suficiente longitud
                if token and len(token) > 1:#token not in self.common_words
                    updates["token"] = token
                    break

        # Luego detectar blockchain, evitando detectar tokens como blockchains
        if "token" not in updates:  # Solo buscar blockchain si no se detect√≥ token expl√≠citamente
            for chain_key, chain_value in self.chain_mapping.items():
                blockchain_patterns = [
                    r'blockchain\s+(?:de\s+)?'+chain_key,
                    r'en\s+'+chain_key,
                    r'de\s+(?:la\s+)?(?:blockchain|cadena|red)\s+(?:de\s+)?'+chain_key,
                    chain_key+r'\s+(?:blockchain|cadena|red)',
                    r'selecciona(?:r)?\s+(?:la\s+)?(?:blockchain|cadena|red)\s+(?:de\s+)?'+chain_key,
                    r'select\s+'+chain_key,
                    r'\b'+chain_key+r'\b'
                ]

                for pattern in blockchain_patterns:
                    if re.search(pattern, query_lower):
                        updates["blockchain"] = chain_key
                        break

                if "blockchain" in updates:
                    break

            # Detectar blockchain no soportada solo si no se detect√≥ token
            blockchain_patterns = [
                r'blockchain\s+(?:de\s+)?(\w+)',
                r'en\s+(\w+)\b(?!\s+token)',
                r'de\s+(?:la\s+)?(?:blockchain|cadena|red)\s+(?:de\s+)?(\w+)',
                r'(\w+)\s+(?:blockchain|cadena|red)',
                r'selecciona(?:r)?\s+(?:la\s+)?(?:blockchain|cadena|red)\s+(?:de\s+)?(\w+)'
            ]

            if "blockchain" not in updates:
                for pattern in blockchain_patterns:
                    blockchain_match = re.search(pattern, query_lower)
                    if blockchain_match:
                        chain = blockchain_match.group(1)
                        if chain not in self.chain_mapping and chain not in self.common_words:
                            return {"error": f"Blockchain '{chain}' no soportada. Las blockchains disponibles son: {', '.join(self.chain_mapping.keys())}"}

        # Detectar protocolo
        protocol_patterns = [
            r'protocol(?:o)?\s+(?:de\s+)?(\w+)',
            r'(?:en|del|con)\s+protocol(?:o)?\s+(?:de\s+)?(\w+)',
            r'(?:el|del)\s+protocol(?:o)?\s+(?:de\s+)?(\w+)',
            r'(\w+)\s+protocol(?:o)?',
            r'selecciona(?:r)?\s+(?:el\s+)?protocol(?:o)?\s+(?:de\s+)?(\w+)'
        ]

        for pattern in protocol_patterns:
            protocol_match = re.search(pattern, query_lower)
            if protocol_match:
                protocol = protocol_match.group(1)
                if protocol not in self.common_words and len(protocol) > 1:
                    updates["protocol"] = protocol
                    break

        # Detectar TVL m√≠nimo con soporte para K y M
        tvl_patterns = [
            r'tvl\s+(?:min(?:imo)?|mayor|superior)\s+(?:a|de)?\s*(\d+(?:\.\d+)?(?:[km])?)',
            r'tvl\s+de\s+(\d+(?:\.\d+)?(?:[km])?)',
            r'tvl\s+minimo\s+de\s+(\d+(?:\.\d+)?(?:[km])?)',
            r'minimo\s+(?:de\s+)?tvl\s+(?:de\s+)?(\d+(?:\.\d+)?(?:[km])?)',
            r'tvl\s+min(?:imo)?\s+(\d+(?:\.\d+)?(?:[km])?)'
        ]

        for pattern in tvl_patterns:
            tvl_match = re.search(pattern, query_lower)
            if tvl_match:
                tvl_value = tvl_match.group(1)
                updates["tvl_min"] = self.process_tvl_value(tvl_value)
                break

        # Detectar APY m√≠nimo
        apy_patterns = [
            r'apy\s+(?:min(?:imo)?|mayor|superior)\s+(?:a|de)?\s*(\d+(?:\.\d+)?)',
            r'apy\s+de\s+(\d+(?:\.\d+)?)',
            r'apy\s+minimo\s+de\s+(\d+(?:\.\d+)?)',
            r'minimo\s+(?:de\s+)?apy\s+(?:de\s+)?(\d+(?:\.\d+)?)',
            r'apy\s+min(?:imo)?\s+(\d+(?:\.\d+)?)'
        ]

        for pattern in apy_patterns:
            apy_match = re.search(pattern, query_lower)
            if apy_match:
                updates["apy_min"] = apy_match.group(1)
                break

        # Detectar b√∫squeda libre de token (si no se ha detectado mediante patrones)
        if "token" not in updates and not any(key in updates for key in ["blockchain", "tvl_min", "apy_min", "protocol", "error"]):
            # Verificar si hay palabras clave de b√∫squeda
            search_keywords = ["buscar", "encontrar", "busca", "encuentra", "hallar", "mostrar", "ver", "listar"]
            if any(keyword in query_lower for keyword in search_keywords):
                # Eliminar palabras clave y palabras comunes
                for word in search_keywords + self.common_words:
                    query_lower = re.sub(r'\b' + word + r'\b', ' ', query_lower)

                # Limpiar y obtener palabras que podr√≠an ser tokens
                tokens = [t for t in query_lower.strip().split() if len(t) > 1 and t not in self.common_words]
                if tokens:
                    updates["token"] = tokens[0]  # Tomar la primera palabra como token

        return updates

    def update_state(self, updates):
        """Actualiza el estado con las variables detectadas sin retornar mensajes"""
        if not updates:
            return None

        # Verificar si hay error
        if "error" in updates:
            return updates["error"]

        # Actualizar el estado silenciosamente
        for key, value in updates.items():
            self.state[key] = value

        # Retornar cadena vac√≠a para evitar mensajes
        return ""

    def detect_position_request(self, query):
        """Detecta si el usuario est√° pidiendo informaci√≥n detallada sobre una posici√≥n espec√≠fica"""
        query_lower = query.lower()

        # Eliminar comillas y par√©ntesis para la detecci√≥n
        query_clean = re.sub(r'[\'"\(\)]', '', query_lower)

        # Patrones para detectar consultas sobre posiciones espec√≠ficas
        position_patterns = [
            r'(?:mas|m√°s)\s*info(?:rmacion|rmaci√≥n)?\s*(?:de|sobre)?\s*(?:la)?\s*(?:posicion|posici√≥n)?\s*(\d+)',
            r'info(?:rmacion|rmaci√≥n)?\s*(?:de|sobre)?\s*(?:la)?\s*(?:posicion|posici√≥n)?\s*(\d+)',
            r'detalle(?:s)?\s*(?:de|sobre)?\s*(?:la)?\s*(?:posicion|posici√≥n)?\s*(\d+)',
            r'dame\s*(?:mas|m√°s)?\s*(?:de|sobre)?\s*(?:la)?\s*(?:posicion|posici√≥n)?\s*(\d+)',
            r'ver\s*(?:la)?\s*(?:posicion|posici√≥n)?\s*(\d+)',
            r'mostrar\s*(?:la)?\s*(?:posicion|posici√≥n)?\s*(\d+)',
            r'detalles\s*(?:del|de la|de)?\s*(\d+)',
            r'mas\s*sobre\s*(?:el|la)?\s*(\d+)',
            r'informacion\s*(?:del|de la)?\s*(\d+)'
        ]

        for pattern in position_patterns:
            position_match = re.search(pattern, query_clean)
            if position_match:
                try:
                    position = int(position_match.group(1))
                    # Ajustar a base 0 para indexar el array
                    return position - 1
                except ValueError:
                    return None

        return None

    def detect_chart_request(self, query):
        """Detecta si el usuario est√° pidiendo un gr√°fico comparativo"""
        query_lower = query.lower()

        # Patrones para detectar solicitudes de gr√°ficos
        chart_patterns = [
            r'(?:haz|crea|genera|muestra|visualiza)(?:me)?\s+(?:un)?\s*(?:grafico|gr√°fico|chart|visualizacion|visualizaci√≥n)',
            r'(?:comparar|compara)(?:me)?\s+(?:las)?\s*(?:oportunidades|posiciones|pools)',
            r'(?:ver|mostrar|visualizar)\s+(?:la)?\s*(?:evolucion|evoluci√≥n|tendencia|historia)',
            r'(?:grafico|gr√°fico|chart)\s+(?:comparativo|de comparacion|comparaci√≥n)',
            r'(?:evoluci√≥n|evolucion)\s+(?:del|de la|de)?\s*apy'
        ]

        for pattern in chart_patterns:
            if re.search(pattern, query_lower):
                return True

        return False

    def get_ai_response(self, context):
        """Genera respuestas conversacionales seg√∫n el contexto"""
        search_responses = [
            "Analizando datos de la blockchain en tiempo real...",
            "Explorando las oportunidades DeFi disponibles ahora mismo...",
            "Rastreando los mejores rendimientos en el ecosistema cripto...",
            "Consultando Smart Contracts en m√∫ltiples blockchains...",
            "Procesando datos on-chain para encontrar las mejores opciones...",
            "Evaluando pools de liquidez y sus rendimientos actuales...",
            "Comparando protocolos DeFi seg√∫n tus criterios...",
            "Buscando oportunidades que maximicen tu APY con el menor riesgo..."
        ]

        details_responses = [
            "Profundizando en los datos de esta posici√≥n...",
            "Analizando m√©tricas detalladas de este protocolo...",
            "Extrayendo informaci√≥n completa de este Smart Contract...",
            "Verificando la composici√≥n y seguridad de esta pool...",
            "Calculando estad√≠sticas hist√≥ricas de rendimiento..."
        ]

        chart_responses = [
            "Visualizando tendencias hist√≥ricas para estas posiciones...",
            "Generando an√°lisis comparativo de rendimientos en el tiempo...",
            "Trazando la evoluci√≥n del APY durante el per√≠odo seleccionado...",
            "Creando visualizaci√≥n para evaluar la estabilidad del rendimiento..."
        ]

        result_comments = [
            "¬°Aqu√≠ tienes los resultados encontrados por Orvee Intelligence!",
            "Orvee Intelligence ha localizado estas oportunidades para ti.",
            "Resultados analizados y verificados por Orvee Intelligence.",
            "Mi algoritmo Orvee ha identificado estas posiciones prometedoras.",
            "Seg√∫n Orvee Intelligence, estas son las mejores opciones disponibles.",
            "Orvee ha completado el an√°lisis. Estas son las oportunidades destacadas.",
            "Resultados procesados. Orvee Intelligence recomienda estas posiciones.",
            "An√°lisis DeFi completado por Orvee Intelligence con √©xito."
        ]

        if context == "search":
            return random.choice(search_responses)
        elif context == "details":
            return random.choice(details_responses)
        elif context == "chart":
            return random.choice(chart_responses)
        elif context == "result_comment":
            return random.choice(result_comments)
        else:
            return "Procesando tu solicitud en el ecosistema DeFi..."

    def generate_result_analysis(self, results):
        """Genera un breve an√°lisis de los resultados encontrados"""
        if not results or len(results) == 0:
            return ""

        # Analizar los datos para generar comentarios relevantes
        protocols = set([r.get('project', '') for r in results])
        chains = set([r.get('chain', '') for r in results])
        max_apy = max([float(r.get('apy', '0%').replace('%', '').replace(',', '')) for r in results])
        min_apy = min([float(r.get('apy', '0%').replace('%', '').replace(',', '')) for r in results])

        analyses = [
            f"He encontrado {len(results)} oportunidades con APYs entre {min_apy:.2f}% y {max_apy:.2f}%.",
            f"Las posiciones destacadas incluyen protocolos como {', '.join(list(protocols)[:3])}.",
            f"Estas oportunidades est√°n disponibles en {len(chains)} blockchain{'s' if len(chains) > 1 else ''}: {', '.join(list(chains))}.",
            "La posici√≥n #1 muestra el mejor rendimiento en funci√≥n de tu b√∫squeda."
        ]

        # Generar an√°lisis aleatorio para no ser repetitivo
        analysis_count = min(2, len(analyses))
        selected_analyses = random.sample(analyses, analysis_count)

        return " ".join(selected_analyses)

    def search_defi_opportunities(self):
        """Busca oportunidades DeFi que cumplan con los criterios actuales"""
        try:
            # Hacer la llamada a la API de DeFiLlama
            response = requests.get('https://yields.llama.fi/pools')

            if response.status_code != 200:
                return None, f"Error al consultar la API de DeFiLlama: {response.status_code}"

            data = response.json()

            if data["status"] != "success" or "data" not in data:
                return None, "Error en la respuesta de la API de DeFiLlama"

            # Convertir los datos a un DataFrame para facilitar el filtrado
            opportunities = pd.DataFrame(data["data"])

            # Aplicar filtros seg√∫n las variables de estado
            filtered_opps = opportunities.copy()

            if self.state["blockchain"]:
                chain_name = self.chain_mapping.get(self.state["blockchain"].lower(), self.state["blockchain"])
                filtered_opps = filtered_opps[filtered_opps['chain'].str.lower() == chain_name.lower()]

            if self.state["protocol"]:
                filtered_opps = filtered_opps[filtered_opps['project'].str.lower() == self.state["protocol"].lower()]

            # Filtrar por s√≠mbolo del token
            if self.state["token"]:
                filtered_opps = filtered_opps[filtered_opps['symbol'].str.lower().str.contains(self.state["token"].lower())]

            # Filtrar por TVL m√≠nimo
            if self.state["tvl_min"]:
                filtered_opps = filtered_opps[filtered_opps['tvlUsd'] >= float(self.state["tvl_min"])]

            if self.state["apy_min"]:
                filtered_opps = filtered_opps[filtered_opps['apy'] >= float(self.state["apy_min"])]

            # Ordenar por APY descendente
            filtered_opps = filtered_opps.sort_values(by='apy', ascending=False)

            # Seleccionar las 5 mejores oportunidades
            top_opportunities = filtered_opps.head(5)

            if top_opportunities.empty:
                self.last_opportunities = []
                return None, "No se encontraron oportunidades que cumplan con los criterios actuales."

            # Guardar las oportunidades completas para consultas detalladas
            self.last_opportunities = top_opportunities.to_dict('records')

            # Preparar los datos para mostrar en Streamlit
            results = []
            for i, opp in enumerate(self.last_opportunities):
                result = {
                    "posicion": i + 1,
                    "chain": opp["chain"],
                    "project": opp["project"],
                    "symbol": opp["symbol"],
                    "tvlUsd": f"${opp['tvlUsd']:,.2f}",
                    "apy": f"{opp['apy']:.2f}%",
                    "ilRisk": opp["ilRisk"],
                    "exposure": opp["exposure"],
                    "pool": opp["pool"]  # A√±adimos el ID de la pool para poder obtener el gr√°fico
                }
                results.append(result)

            return results, None  # Devolver resultados y None para el error

        except Exception as e:
            return None, f"Error al buscar oportunidades DeFi: {str(e)}"

    def get_position_details(self, position_index):
        """Obtiene los detalles completos de una posici√≥n espec√≠fica"""
        if not self.last_opportunities or position_index < 0 or position_index >= len(self.last_opportunities):
            return None, "Posicion no disponible. Por favor, primero busca oportunidades."

        # Obtener la posici√≥n solicitada
        position = self.last_opportunities[position_index]

        # Formatear todos los datos disponibles
        formatted_position = {}
        for key, value in position.items():
            if key == 'tvlUsd':
                formatted_position[key] = f"${value:,.2f}"
            elif key in ['apy', 'apyBase', 'apyReward', 'apyPct1D', 'apyPct7D', 'apyPct30D', 'apyMean30d']:
                if value is not None:
                    formatted_position[key] = f"{value:.2f}%"
                else:
                    formatted_position[key] = "No disponible"
            elif key == 'rewardTokens' and value:
                formatted_position[key] = ", ".join(value) if value else "Ninguno"
            elif key == 'underlyingTokens' and value:
                formatted_position[key] = ", ".join(value) if value else "Ninguno"
            else:
                formatted_position[key] = value

        # Convertir a DataFrame para mostrarlo como tabla
        detail_df = pd.DataFrame([formatted_position])
        detail_df_transposed = detail_df.T.reset_index()
        detail_df_transposed.columns = ['Caracter√≠stica', 'Valor']

        return detail_df_transposed, None  # Devolver detalles y None para el error

    def generate_comparative_chart(self):
        """Genera un gr√°fico comparativo de la evoluci√≥n del APY para las posiciones encontradas"""
        if not self.last_opportunities:
            return None, "No hay posiciones para comparar. Primero realiza una b√∫squeda."

        try:
            # Obtener datos hist√≥ricos de cada posici√≥n
            position_data = []
            legends = []

            for i, position in enumerate(self.last_opportunities):
                if 'pool' not in position:
                    continue

                pool_id = position['pool']
                url = f'https://yields.llama.fi/chart/{pool_id}'

                response = requests.get(url)
                if response.status_code != 200:
                    continue

                data = response.json()
                if data["status"] != "success" or "data" not in data:
                    continue

                # Crear un DataFrame para esta posici√≥n
                pool_df = pd.DataFrame(data["data"])

                # Convertir timestamp a datetime y eliminar informaci√≥n de zona horaria
                pool_df['timestamp'] = pd.to_datetime(pool_df['timestamp']).dt.tz_localize(None)

                # Filtrar para los √∫ltimos 7 d√≠as
                last_7_days = datetime.now() - timedelta(days=7)
                pool_df = pool_df[pool_df['timestamp'] >= last_7_days]

                # Si hay datos, a√±adirlos a la lista
                if not pool_df.empty:
                    position_data.append(pool_df)
                    # Crear leyenda con informaci√≥n de la posici√≥n
                    legend = f"{i+1}: {position['symbol']} ({position['project']} - {position['chain']})"
                    legends.append(legend)

            if not position_data:
                return None, "No se pudieron obtener datos hist√≥ricos para ninguna de las posiciones."

            # Crear figura de Plotly
            fig = go.Figure()

            # A√±adir l√≠nea para cada posici√≥n
            for i, data in enumerate(position_data):
                fig.add_trace(go.Scatter(
                    x=data['timestamp'],
                    y=data['apy'],
                    mode='lines+markers',
                    name=legends[i],
                    line=dict(width=2),
                    marker=dict(size=6)
                ))

            # Configurar el dise√±o del gr√°fico
            fig.update_layout(
                title="Evoluci√≥n del APY en los √∫ltimos 7 d√≠as",
                xaxis_title="Fecha",
                yaxis_title="APY (%)",
                legend_title="Posiciones",
                template="plotly_white",
                height=600
            )

            return fig, None

        except Exception as e:
            return None, f"Error al generar el gr√°fico comparativo: {str(e)}"

    def process_query(self, query):
        """Procesa la consulta del usuario de manera inteligente"""
        query_lower = query.lower()

        # Verificar si es una solicitud de reseteo
        if any(word in query_lower for word in ["reset", "resetear", "borrar", "limpiar", "reiniciar"]):
            self.reset_state()
            return "Variables reseteadas. Ahora puedes establecer nuevos criterios de b√∫squeda."

        # Verificar si es una solicitud de gr√°fico comparativo
        if self.detect_chart_request(query):
            ai_message = self.get_ai_response("chart")
            fig, error = self.generate_comparative_chart()
            if error:
                return f"{ai_message}\n\n{error}"
            return f"{ai_message}\n\nGr√°fico comparativo de APY de las √∫ltimas oportunidades:", "chart", fig

        # Verificar si el usuario est√° pidiendo detalles sobre una posici√≥n espec√≠fica
        position_index = self.detect_position_request(query)
        if position_index is not None:
            ai_message = self.get_ai_response("details")
            details, error = self.get_position_details(position_index)
            if error:
                return f"{ai_message}\n\n{error}"
            return f"{ai_message}\n\nDetalles de la posici√≥n {position_index + 1}:", "details", details

        # Detectar y actualizar todas las variables mencionadas en la consulta
        updates = self.detect_all_variables(query)
        if updates and "error" in updates:
            return updates["error"]  # Devolver mensaje de error

        # Actualizar estado sin mensajes
        if updates:
            self.update_state(updates)

        # A√±adir mensaje AI para b√∫squeda
        ai_message = self.get_ai_response("search")

        # Buscar y devolver resultados
        results, error = self.search_defi_opportunities()

        if error:
            return f"{ai_message}\n\n{error}"

        # Obtener comentario de resultado y an√°lisis
        result_comment = self.get_ai_response("result_comment")
        result_analysis = self.generate_result_analysis(results) if results else ""

        # Combinar mensajes y resultados
        if result_analysis:
            return f"{ai_message}\n\n{result_comment} {result_analysis}", "results", results
        else:
            return f"{ai_message}\n\n{result_comment}", "results", results

    def reset_state(self):
        """Resetea todas las variables a None"""
        for key in self.state:
            self.state[key] = None
        self.last_opportunities = []

# Inicializaci√≥n del estado de sesi√≥n
if "agent" not in st.session_state:
    st.session_state.agent = CryptoAgent()

if "messages" not in st.session_state:
    st.session_state.messages = []

# T√≠tulo y descripci√≥n
st.title("üöÄ Rocky - DeFi Assistant")
st.markdown("""
Asistente de DeFi que te ayuda a encontrar las mejores oportunidades seg√∫n tus criterios.
Simplemente dime qu√© buscas y te mostrar√© opciones que cumplan tus requisitos.
""")

# Sidebar con variables actuales
st.sidebar.header("Criterios actuales")
if st.session_state.agent:
    agent = st.session_state.agent
    st.sidebar.markdown(f"**Blockchain:** {agent.state['blockchain'] or 'No especificado'}")
    st.sidebar.markdown(f"**Token:** {agent.state['token'] or 'No especificado'}")
    st.sidebar.markdown(f"**TVL m√≠nimo:** {agent.state['tvl_min'] + '$' if agent.state['tvl_min'] else 'No especificado'}")
    st.sidebar.markdown(f"**APY m√≠nimo:** {agent.state['apy_min'] + '%' if agent.state['apy_min'] else 'No especificado'}")
    st.sidebar.markdown(f"**Protocolo:** {agent.state['protocol'] or 'No especificado'}")

    if st.sidebar.button("Resetear criterios"):
        agent.reset_state()
        st.sidebar.success("Criterios reseteados")
        st.rerun()

# Mostrar mensajes anteriores
for message in st.session_state.messages:
    if message["role"] == "user":
        st.chat_message("user").write(message["content"])
    else:
        st.chat_message("assistant").write(message["content"])

        # Si hay datos para mostrar
        if "data_type" in message and "data" in message:
            if message["data_type"] == "results" or message["data_type"] == "details":
                # Mostrar tabla de resultados o detalles
                st.dataframe(message["data"], use_container_width=True)
            elif message["data_type"] == "chart" and message["data"] is not None:
                # Mostrar gr√°fico
                st.plotly_chart(message["data"], use_container_width=True)

# Input del usuario
prompt = st.chat_input("¬øQu√© quieres buscar? (Ej: 'Token ETH en Arbitrum con TVL m√≠nimo 1M')")

if prompt:
    # Agregar mensaje del usuario
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)

    # Procesar la consulta
    agent = st.session_state.agent
    response = agent.process_query(prompt)

    # Verificar si la respuesta contiene datos
    if isinstance(response, tuple) and len(response) == 3:
        message, data_type, data = response

        # Agregar mensaje a la sesi√≥n
        st.session_state.messages.append({
            "role": "assistant",
            "content": message,
            "data_type": data_type,
            "data": data
        })

        # Mostrar mensaje
        st.chat_message("assistant").write(message)

        # Mostrar datos seg√∫n el tipo
        if data_type == "results" or data_type == "details":
            if data is not None:
                st.dataframe(data, use_container_width=True)
        elif data_type == "chart":
            if data is not None:
                st.plotly_chart(data, use_container_width=True)
    else:
        # Es un mensaje simple
        st.session_state.messages.append({
            "role": "assistant",
            "content": response,
            "data_type": None,
            "data": None
        })
        st.chat_message("assistant").write(response)

    # Actualizar sidebar
    st.rerun()
